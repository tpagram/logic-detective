{"version":3,"sources":["components/Cell.tsx","components/Block.tsx","components/CategoryBlock.tsx","components/Board.tsx","components/ClueList.tsx","App.tsx","components/Puzzle.tsx","serviceWorker.ts","index.tsx"],"names":["Status","Cell","styled","div","props","status","unselected","nonmatch","match","useState","setStatus","onClick","currentStatus","newStatus","Block","columns","categoryCount","cells","i","push","CategoryBlock","position","CategoryCell","CategoryTitle","subcategories","map","subcat","length","Board","TopLeftBlank","Blank","categories","Object","keys","slice","forEach","category","sideCategoryCells","sideCategory","pop","j","buildCells","ClueList","rows","Clue","active","clues","Array","fill","activeClues","setActiveClues","clue","index","newActiveClues","examplePuzzleProps","colour","drink","cigarette","pet","nationality","App","Puzzle","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAGKA,E,6VAAAA,O,2BAAAA,I,iBAAAA,I,wBAAAA,M,KAML,IAAMC,EAAOC,IAAOC,IAAV,KAMc,SAAAC,GAClB,OAAQA,EAAMC,QACZ,KAAKL,EAAOM,WACV,MAAO,UACT,KAAKN,EAAOO,SACV,MAAO,UACT,KAAKP,EAAOQ,MACV,MAAO,cAIK,SAAAJ,GAClB,OAAQA,EAAMC,QACZ,KAAKL,EAAOM,WACV,MAAO,QACT,KAAKN,EAAOO,SACV,MAAO,UACT,KAAKP,EAAOQ,MACV,MAAO,cAgBA,aAAO,IAAD,EACSC,mBAAST,EAAOM,YADzB,mBACZD,EADY,KACJK,EADI,KAGnB,OAAO,kBAACT,EAAD,CAAMI,OAAQA,EAAQM,QAAS,kBAAMD,EAd5B,SAACE,GACjB,OAAQA,GACN,KAAKZ,EAAOM,WACV,OAAON,EAAOO,SAChB,KAAKP,EAAOO,SACV,OAAOP,EAAOQ,MAChB,KAAKR,EAAOQ,MACV,OAAOR,EAAOM,YAOoCO,CAAUR,Q,6LChDlE,IAAMS,EAAQZ,IAAOC,IAAV,KAEgB,SAAAC,GAAK,uBAAcA,EAAMW,QAApB,aASjB,cAEb,IAFiD,IAAjCC,EAAgC,EAAhCA,cACZC,EAAuB,GAClBC,EAAI,EAAGA,EAAC,SAAGF,EAAiB,GAAGE,IACtCD,EAAME,KAAK,kBAAC,EAAD,OAGb,OAAO,kBAACL,EAAD,CAAOC,QAASC,GAAgBC,I,0gBClBzC,IAAMG,EAAgBlB,IAAOC,IAAV,KAEQ,SAAAC,GAAK,MACT,QAAnBA,EAAMiB,SAAN,iBAAqCjB,EAAMW,QAA3C,mBACoB,SAAAX,GAAK,MACN,SAAnBA,EAAMiB,SAAN,iBAAsCjB,EAAMW,QAA5C,mBAKEO,EAAepB,IAAOC,IAAV,KAGA,SAAAC,GAAK,MACA,SAAnBA,EAAMiB,SAAsB,gBAAkB,iBAM5CE,EAAgBrB,IAAOC,IAAV,KAOJ,cAAsD,IAAnDqB,EAAkD,EAAlDA,cAAeH,EAAmC,EAAnCA,SAC3BJ,EAAuBO,EAAcC,KAAI,SAAAC,GAAM,OACjD,kBAACJ,EAAD,CAAcD,SAAUA,GACtB,kBAACE,EAAD,KAAgBG,OAIpB,OACE,kBAACN,EAAD,CAAeL,QAASS,EAAcG,OAAQN,SAAUA,GACrDJ,I,yaCjCP,IAAMW,EAAQ1B,IAAOC,IAAV,KAEgB,SAAAC,GAAK,2BAAkBA,EAAMW,QAAxB,aACR,SAAAX,GAAK,2BAAkBA,EAAMW,QAAxB,aAOvBc,EAAe3B,IAAOC,IAAV,KAIZ2B,EAAQ5B,IAAOC,IAAV,KAwCI,cAAiC,IAA9B4B,EAA6B,EAA7BA,WAChB,OACE,kBAACH,EAAD,CAAOb,QAASiB,OAAOC,KAAKF,GAAYJ,OAAS,GApClC,SAACI,GAClB,IAAIf,EAAgBgB,OAAOC,KAAKF,GAAYJ,OACxCV,EAAuB,CAAC,kBAACY,EAAD,OAE5BG,OAAOC,KAAKF,GACTG,MAAM,GAAI,GACVC,SAAQ,SAAAC,GAAQ,OACfnB,EAAME,KACJ,kBAAC,EAAD,CAAeK,cAAeO,EAAWK,GAAWf,SAAS,YAUnE,IANA,IAAIgB,EAAmCL,OAAOC,KAAKF,GAChDG,MAAM,GACNT,KAAI,SAAAW,GAAQ,OACX,kBAAC,EAAD,CAAeZ,cAAeO,EAAWK,GAAWf,SAAS,YAGxDH,EAAI,EAAGA,EAAIF,EAAgB,EAAGE,IAAK,CAC1C,IAAIoB,EAAeD,EAAkBE,MACjCD,GACFrB,EAAME,KAAKmB,GAGb,IAAK,IAAIE,EAAI,EAAGA,EAAIxB,EAAgB,EAAIE,EAAGsB,IACzCvB,EAAME,KAAK,kBAAC,EAAD,CAAOH,cAAeA,KAEnC,IAAK,IAAIwB,EAAI,EAAGA,EAAItB,EAAGsB,IACrBvB,EAAME,KAAK,kBAACW,EAAD,OAGf,OAAOb,EAMFwB,CAAWV,K,sYC5DlB,IAAMW,EAAWxC,IAAOC,IAAV,KAEU,SAAAC,GAAK,uBAAcA,EAAMuC,KAApB,aAOvBC,EAAO1C,IAAOC,IAAV,KACW,SAAAC,GAAK,OAAKA,EAAMyC,OAAS,OAAS,kBAmBxC,cAA+B,IAA5BC,EAA2B,EAA3BA,MAA2B,EACLrC,mBACpCsC,MAAMD,EAAMnB,QAAQqB,MAAK,IAFgB,mBACpCC,EADoC,KACvBC,EADuB,KAK3C,OACE,kBAACR,EAAD,CAAUC,KAAMG,EAAMnB,QACnBmB,EAAMrB,KAAI,SAAC0B,EAAMC,GAChB,OACE,kBAACR,EAAD,CACEC,OAAQI,EAAYG,GACpBzC,QAAS,kBAAMuC,EAjBJ,SAACD,EAAwBG,GAG9C,OAFAH,EAAcA,EAAYf,SACdkB,IAAUH,EAAYG,GAC3BH,EAciCI,CAAeJ,EAAaG,MAEzDA,EAAQ,EAJX,KAIgBD,QCzCpBG,EAAqB,CACzBvB,WAAY,CACVwB,OAAQ,CAAC,SAAU,OAAQ,MAAO,QAAS,SAC3CC,MAAO,CAAC,OAAQ,SAAU,OAAQ,MAAO,SACzCC,UAAW,CAAC,QAAS,aAAc,UAAW,WAAY,UAC1DC,IAAK,CAAC,QAAS,OAAQ,OAAQ,OAAQ,UACvCC,YAAa,CAAC,OAAQ,aAAc,SAAU,QAAS,cAEzDb,MAAO,CACL,yCACA,wBACA,uBACA,wDACA,8CACA,oCACA,iDACA,2CACA,0CACA,kDACA,+CACA,6DACA,4BACA,8CACA,sDAMWc,EAFO,kBCrBP,YAAyC,IAAtC7B,EAAqC,EAArCA,WAAYe,EAAyB,EAAzBA,MAC5B,OACE,6BACE,kBAAC,EAAD,CAAOf,WAAYA,IADrB,IAEE,kBAAC,EAAD,CAAUe,MAAOA,KDiBKe,CAAOP,IEnBfQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzD,MACvB,2DCZN0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d8c024f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nenum Status {\n  unselected,\n  match,\n  nonmatch\n}\n\nconst Cell = styled.div<{ status: Status }>`\n  /* border: 1px solid black; */\n  border-bottom: 1px solid #dbd9d5;\n  border-right: 1px solid #dbd9d5;\n  &:hover {\n    cursor: pointer;\n    background-color: ${props => {\n      switch (props.status) {\n        case Status.unselected:\n          return \"#dbd9d5\";\n        case Status.nonmatch:\n          return \"#FF9292\";\n        case Status.match:\n          return \"#CDEF89\";\n      }\n    }};\n  }\n  background-color: ${props => {\n    switch (props.status) {\n      case Status.unselected:\n        return \"white\";\n      case Status.nonmatch:\n        return \"#C43535\";\n      case Status.match:\n        return \"#8AB732\";\n    }\n  }};\n`;\n\nconst newStatus = (currentStatus: Status) => {\n  switch (currentStatus) {\n    case Status.unselected:\n      return Status.nonmatch;\n    case Status.nonmatch:\n      return Status.match;\n    case Status.match:\n      return Status.unselected;\n  }\n};\n\nexport default () => {\n  const [status, setStatus] = useState(Status.unselected);\n\n  return <Cell status={status} onClick={() => setStatus(newStatus(status))} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Cell from \"./Cell\";\n\nconst Block = styled.div<{ columns: number }>`\n  display: grid;\n  grid-template-columns: ${props => `repeat(${props.columns}, 1fr)`};\n  border-bottom: 2px solid black;\n  border-right: 2px solid black;\n`;\n\ntype BlockProps = {\n  categoryCount: number;\n};\n\nexport default ({ categoryCount }: BlockProps) => {\n  let cells: JSX.Element[] = [];\n  for (let i = 0; i < categoryCount ** 2; i++) {\n    cells.push(<Cell />);\n  }\n\n  return <Block columns={categoryCount}>{cells}</Block>;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst CategoryBlock = styled.div<{ columns: number; position: string }>`\n  display: grid;\n  grid-template-columns: ${props =>\n    props.position === \"top\" ? `repeat(${props.columns}, 1fr)` : `1fr`};\n  grid-template-rows: ${props =>\n    props.position === \"side\" ? `repeat(${props.columns}, 1fr)` : `1fr`};\n  border-bottom: 2px solid black;\n  border-right: 2px solid black;\n`;\n\nconst CategoryCell = styled.div<{ position: string }>`\n  border-bottom: 1px solid #dbd9d5;\n  border-right: 1px solid #dbd9d5;\n  writing-mode: ${props =>\n    props.position === \"side\" ? \"horizontal-tb\" : \"sideways-lr\"};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CategoryTitle = styled.div``;\n\ntype CategoryBlockProps = {\n  subcategories: string[];\n  position: string;\n};\n\nexport default ({ subcategories, position }: CategoryBlockProps) => {\n  let cells: JSX.Element[] = subcategories.map(subcat => (\n    <CategoryCell position={position}>\n      <CategoryTitle>{subcat}</CategoryTitle>\n    </CategoryCell>\n  ));\n\n  return (\n    <CategoryBlock columns={subcategories.length} position={position}>\n      {cells}\n    </CategoryBlock>\n  );\n};\n","import Block from \"./Block\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport CategoryBlock from \"./CategoryBlock\";\nimport { CategoryList } from \"../types/CategoryList\";\n\nconst Board = styled.div<{ columns: number }>`\n  display: grid;\n  grid-template-columns: ${props => `1fr repeat(${props.columns}, 1fr)`};\n  grid-template-rows: ${props => `1fr repeat(${props.columns}, 1fr)`};\n  height: 600px;\n  width: 600px;\n  float: left;\n  margin: 35px;\n`;\n\nconst TopLeftBlank = styled.div`\n  border-bottom: 2px solid black;\n  border-right: 2px solid black;\n`;\nconst Blank = styled.div``;\n\ntype BoardProps = {\n  categories: CategoryList;\n};\n\nconst buildCells = (categories: CategoryList) => {\n  let categoryCount = Object.keys(categories).length;\n  let cells: JSX.Element[] = [<TopLeftBlank />];\n\n  Object.keys(categories)\n    .slice(0, -1)\n    .forEach(category =>\n      cells.push(\n        <CategoryBlock subcategories={categories[category]} position=\"top\" />\n      )\n    );\n\n  let sideCategoryCells: JSX.Element[] = Object.keys(categories)\n    .slice(1)\n    .map(category => (\n      <CategoryBlock subcategories={categories[category]} position=\"side\" />\n    ));\n\n  for (let i = 0; i < categoryCount - 1; i++) {\n    let sideCategory = sideCategoryCells.pop();\n    if (sideCategory) {\n      cells.push(sideCategory);\n    }\n\n    for (let j = 0; j < categoryCount - 1 - i; j++) {\n      cells.push(<Block categoryCount={categoryCount} />);\n    }\n    for (let j = 0; j < i; j++) {\n      cells.push(<Blank />);\n    }\n  }\n  return cells;\n};\n\nexport default ({ categories }: BoardProps) => {\n  return (\n    <Board columns={Object.keys(categories).length - 1}>\n      {buildCells(categories)}\n    </Board>\n  );\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ClueList = styled.div<{ rows: number }>`\n  display: grid;\n  grid-template-rows: ${props => `repeat(${props.rows}, 1fr)`};\n  height: 600px;\n  width: 500px;\n  float: left;\n  margin: 35px;\n`;\n\nconst Clue = styled.div<{ active: boolean }>`\n  text-decoration: ${props => (props.active ? \"none\" : \"line-through\")};\n  margin: 2px;\n  padding: 2px;\n  &:hover {\n    text-decoration: line-through;\n    cursor: pointer;\n  }\n`;\n\ninterface ClueListProps {\n  clues: string[];\n}\n\nconst newActiveClues = (activeClues: boolean[], index: number) => {\n  activeClues = activeClues.slice();\n  activeClues[index] = !activeClues[index];\n  return activeClues;\n};\n\nexport default ({ clues }: ClueListProps) => {\n  const [activeClues, setActiveClues] = useState(\n    Array(clues.length).fill(true)\n  );\n\n  return (\n    <ClueList rows={clues.length}>\n      {clues.map((clue, index) => {\n        return (\n          <Clue\n            active={activeClues[index]}\n            onClick={() => setActiveClues(newActiveClues(activeClues, index))}\n          >\n            {index + 1}. {clue}\n          </Clue>\n        );\n      })}\n    </ClueList>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Puzzle from \"./components/Puzzle\";\n\nconst examplePuzzleProps = {\n  categories: {\n    colour: [\"Yellow\", \"Blue\", \"Red\", \"White\", \"Green\"],\n    drink: [\"Bier\", \"Coffee\", \"Milk\", \"Tea\", \"Water\"],\n    cigarette: [\"Blend\", \"BlueMaster\", \"Dunhill\", \"PallMall\", \"Prince\"],\n    pet: [\"Birds\", \"Cats\", \"Dogs\", \"Fish\", \"Horses\"],\n    nationality: [\"Dane\", \"Englishman\", \"German\", \"Swede\", \"Norwegian\"]\n  },\n  clues: [\n    \"The Englishman lives in the red house.\",\n    \"The Swede keeps dogs.\",\n    \"The Dane drinks tea.\",\n    \"The green house is just to the left of the white one.\",\n    \"The owner of the green house drinks coffee.\",\n    \"The Pall Mall smoker keeps birds.\",\n    \"The owner of the yellow house smokes Dunhills.\",\n    \"The man in the center house drinks milk.\",\n    \"The Norwegian lives in the first house.\",\n    \"The Blend smoker has a neighbor who keeps cats.\",\n    \"The man who smokes Blue Masters drinks bier.\",\n    \"The man who keeps horses lives next to the Dunhill smoker.\",\n    \"The German smokes Prince.\",\n    \"The Norwegian lives next to the blue house.\",\n    \"The Blend smoker has a neighbor who drinks water.\"\n  ]\n};\n\nconst App: React.FC = () => Puzzle(examplePuzzleProps);\n\nexport default App;\n","import Board from \"./Board\";\nimport React from \"react\";\nimport { CategoryList } from \"../types/CategoryList\";\nimport ClueList from \"./ClueList\";\n\ntype PuzzleProps = {\n  categories: CategoryList;\n  clues: string[];\n};\n\nexport default ({ categories, clues }: PuzzleProps) => {\n  return (\n    <div>\n      <Board categories={categories}/>,\n      <ClueList clues={clues}/>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}